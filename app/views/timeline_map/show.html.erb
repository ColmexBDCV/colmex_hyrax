<h1>Mapa y Línea de Tiempo de Registros</h1>

<div id="mapid" style="height: 500px; width: 100%;"></div>
<div id="timeline" style="height: 200px; width: 100%;"></div>

<script>
  document.addEventListener('turbolinks:load', function() {
    var data = <%= raw @data.to_json %>;

    // Set Leaflet's default image path
    L.Icon.Default.imagePath = "";
    var defaultIcon = new L.Icon({
      iconRetinaUrl: '<%= image_path("marker-icon-2x.png") %>',
      iconUrl: '<%= image_path("marker-icon.png") %>',
      shadowUrl: '<%= image_path("marker-shadow.png") %>',
      iconSize: [25, 41],
      iconAnchor: [12, 41],
      popupAnchor: [1, -34],
      shadowSize: [41, 41]
    });
    var mymap = L.map('mapid').setView([23.6345, -102.5528], 5); // Centered on Mexico

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(mymap);

    // Prepare data for Vis Timeline
    var timelineItems = new vis.DataSet();
    var mapMarkers = {}; // To store Leaflet markers by ID

    function getYear(dateString) {
      // Asegurarnos de que la fecha se interprete en UTC
      var parts = dateString.split('-');
      if (parts.length >= 1) {
        // Si solo tenemos el año
        return parseInt(parts[0]);
      } else {
        // Si por alguna razón no podemos parsear la fecha, usamos Date como fallback
        return new Date(dateString + "T00:00:00Z").getUTCFullYear();
      }
    }

    // Process data and create single items per year
    var yearCounts = {};
    
    data.forEach(function(item) {
      if (item.lat && item.lon && item.date) {
        var year = getYear(item.date);
        if (!yearCounts[year]) {
          yearCounts[year] = 0;
        }
        yearCounts[year]++;
        
        // Add marker to map
        var marker = L.marker([item.lat, item.lon], {icon: defaultIcon}).addTo(mymap)
          .bindPopup('<b>' + item.title + '</b><br>' + item.date);
        mapMarkers[item.id] = marker;
      }
    });

    // Create timeline items - one per year
    Object.keys(yearCounts).forEach(function(year) {
      timelineItems.add({
        id: year,
        content: year + ' (' + yearCounts[year] + ')',
        start: new Date(Date.UTC(parseInt(year), 0, 1))
      });
    });

    // Find the range of years
    var years = Object.keys(yearCounts).map(Number);
    var minYear = Math.min(...years);
    var maxYear = Math.max(...years);
    
    // Calculate center year and start/end for 5-year window
    var centerYear = Math.floor((minYear + maxYear) / 2);
    var windowStart = new Date(Date.UTC(centerYear - 2, 0, 1));
    var windowEnd = new Date(Date.UTC(centerYear + 2, 11, 31));

    console.log(centerYear, windowStart, windowEnd);  
    // Initialize the timeline
    var container = document.getElementById('timeline');
    var options = {
      orientation: {
        axis: 'top'
      },
      showCurrentTime: true,
      stack: true,
      height: '200px',
      zoomMin: 31536000000, // 1 year in ms
      start: windowStart,
      end: windowEnd,
      format: {
        minorLabels: {
          year: 'YYYY'
        }
      },
      timeAxis: { scale: 'year' }
    };
    var timeline = new vis.Timeline(container, timelineItems, options);

    // Asegurarse de que todos los items sean visibles inicialmente
    timeline.fit();

    // Link map and timeline interactivity
    timeline.on('select', function (properties) {
      if (properties.items.length > 0) {
        var selectedYear = properties.items[0];
        // Hide all markers first
        Object.values(mapMarkers).forEach(function(marker) {
          mymap.removeLayer(marker);
        });
        
        // Show only markers from selected year
        data.forEach(function(item) {
          if (item.lat && item.lon && item.date && getYear(item.date) == selectedYear) {
            var marker = mapMarkers[item.id];
            marker.addTo(mymap);
          }
        });
        
        // Adjust map view to show all visible markers
        var visibleMarkers = [];
        Object.values(mapMarkers).forEach(function(marker) {
          if (mymap.hasLayer(marker)) {
            visibleMarkers.push(marker.getLatLng());
          }
        });
        
        if (visibleMarkers.length > 0) {
          mymap.fitBounds(L.latLngBounds(visibleMarkers));
        }
      } else {
        // If no year is selected, show all markers
        Object.values(mapMarkers).forEach(function(marker) {
          marker.addTo(mymap);
        });
      }
    });
  });
</script>